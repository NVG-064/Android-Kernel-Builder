name: "Build kernels"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v4

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat  ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}

      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}

      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.device }}_defconfig

      withKernelSU: ${{ matrix.repos.withKernelSU }}
    steps:
      - name: "‚ú® Create working dir"
        run: mkdir -p $kernelDir

      - name: "‚≠ê Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl flex cpio ccache rsync git zip dwarves libelf-dev ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python3 libarchive-tools

      - name: "üåü Clone kernel source => (${{ env.kernelRepo }})"
        working-directory: ./${{ env.kernelDir }}
        run: |
          git clone --recursive --branch $kernelBranch $kernelRepo $kernelName --depth=1

      - name: "üí´ Get toolchains"
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "ü§î There are $toolchains_num defined toolchains."
  
          for ((i=0; i<toolchains_num; i++)); do
            toolchain=$(echo "$toolchains" | jq -r ".[$i]")
            toolchain_name=$(echo "$toolchain" | jq -r ".name")
  
            if echo "$toolchain" | jq -e 'has("url")' > /dev/null; then
              toolchain_url=$(echo "$toolchain" | jq -r ".url")
              mkdir -p "$toolchain_name"
              filename="${toolchain_url##*/}"
  
              echo "üöÄ Downloading $toolchain_name from $toolchain_url..."
              if wget --progress=bar:force -O "$filename" "$toolchain_url"; then
                case "$filename" in
                  *.zip) unzip -d "$toolchain_name" "$filename" ;;
                  *.tar) tar -xvf "$filename" -C "$toolchain_name" ;;
                  *.tar.gz|*.tgz) tar -zxvf "$filename" -C "$toolchain_name" ;;
                  *.tar.xz) tar -xJf "$filename" -C "$toolchain_name" ;;
                  *.rar) unrar x "$filename" "$toolchain_name" ;;
                  *) echo "‚ö†Ô∏è Unknown file type: $filename, skipping extraction." ;;
                esac
                rm -f "$filename"
                echo "‚úÖ Downloaded and extracted $toolchain_name"
                else
                echo "‚ùå Failed to download $toolchain_url"
                exit 1
                fi
            else
              toolchain_repo=$(echo "$toolchain" | jq -r ".repo")
              toolchain_branch=$(echo "$toolchain" | jq -r ".branch")
              echo "üöÄ Cloning $toolchain_name from $toolchain_repo (branch: $toolchain_branch)..."
              if git clone --recursive --depth=1 -j "$(nproc)" --branch "$toolchain_branch" "$toolchain_repo" "$toolchain_name"; then
                echo "‚úÖ Cloned $toolchain_name"
              else
                echo "‚ùå Failed to clone $toolchain_repo"
                exit 1
              fi
            fi
  
              # Properly iterate over binaryEnv and export paths
              echo "$toolchain" | jq -r ".binaryEnv[] | tostring" | while read -r subPath; do
                echo "${{ github.workspace }}/$toolchain_name/$subPath" >> "$GITHUB_PATH"
              done
            done  

      - name: üìê Set swap to 20G
        uses: pierotofy/set-swap-space@master
        with:
            swap-size-gb: 20

      - name: "üòé Set args for GKI"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
            params: "${{ toJSON(matrix.repos.params) }}"
        run: |
            ARCH=$(echo $params | jq -r ".ARCH")
            CROSS_COMPILE=$(echo $params | jq -r ".CROSS_COMPILE")
            CROSS_COMPILE_ARM32=$(echo $params | jq -r ".CROSS_COMPILE_ARM32")
            CLANG_TRIPLE=$(echo $params | jq -r ".CLANG_TRIPLE")
            AR=$(echo $params | jq -r ".AR")
            CC=$(echo $params | jq -r ".CC")
          
            echo "ARCH=arm64" >> $GITHUB_ENV
            echo "LLVM=1" >> $GITHUB_ENV
            echo "LTO=thin" >> $GITHUB_ENV  # ‚úÖ Enable ThinLTO

            args="-j$(nproc --all)"
            if [ -n "${{ env.OUT_DIR }}" ]; then
              mkdir -p $(pwd)/${{ env.OUT_DIR }}
              args="$args O=$(pwd)/${{ env.OUT_DIR }}"
            fi
            args="$args ARCH=arm64 LLVM=1 LTO=thin"  # ‚úÖ Updated for GKI
            if [ -n "$CROSS_COMPILE" ]; then
              args="$args CROSS_COMPILE=$CROSS_COMPILE"
            fi
            if [ -n "$CLANG_TRIPLE" ]; then
              args="$args CLANG_TRIPLE=$CLANG_TRIPLE"
            fi
            if [ -n "$CROSS_COMPILE_ARM32" ]; then
              args="$args CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32"
            fi
            if [ -n "$AR" ]; then
              args="$args AR=$AR"
            fi
            if [ -n "$CC" ]; then
              args="$args CC=$CC"
            fi
            echo "args=$args" >> $GITHUB_OUTPUT
          
      - name: "üòã Update KernelSU-Next"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          if [ -d "./KernelSU-Next" ]; then
            rm -rf "./KernelSU-Next"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -

          cat ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "üëç Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "üé∂ Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          export KBUILD_BUILD_USER="Action"
          export KBUILD_BUILD_HOST="GitHub"
          echo "PATH Variable: $PATH"
          make ${args} LLVM=1 LTO=thin KBUILD_BUILD_USER="$KBUILD_BUILD_USER" KBUILD_BUILD_HOST="$KBUILD_BUILD_HOST" -j$(nproc --all)

      - name: "üíõ Upload Image"
        uses: actions/upload-artifact@v4
        with:
          name: Image(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image
          if-no-files-found: ignore
          retention-days: 7
